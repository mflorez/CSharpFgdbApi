<?xml version="1.0" encoding="UTF-8"?>
<metadata xml:lang="en"><Esri><CreaDate>20171016</CreaDate><CreaTime>14543300</CreaTime><ArcGISFormat>1.0</ArcGISFormat><SyncOnce>TRUE</SyncOnce><DataProperties><lineage><Process ToolSource="c:\program files (x86)\arcgis\desktop10.5\ArcToolbox\Toolboxes\Data Management Tools.tbx\CalculateField" Date="20171016" Time="143547">CalculateField Cities MyDate "datetime.datetime(2017, 10, 16, 12, 30, 45) - datetime.timedelta(hours= !OBJECTID!)" PYTHON_9.3 #</Process><Process ToolSource="c:\program files (x86)\arcgis\desktop10.5\ArcToolbox\Toolboxes\Data Management Tools.tbx\CalculateField" Date="20171016" Time="145315">CalculateField Cities DTG1 createDateTimeGroupValues( arcpy.time.ParseDateTimeString( !MyDate! )) PYTHON_9.3 "import datetime\nfrom random import choice\ndef createDateTimeGroupValues(dateTime):\n    codes = [chr(n) for n in range(65, 65+26)]\n    formats = ["%d%H%M{} %b %Y", \n               "%d%H%M{}%b%Y",\n               "%d %H%M{} %b %Y",\n               "%d%H%M%S{}%b%Y",\n               "%d %H%M%S{} %b %Y",\n               "%d%H%M{}%b%y",\n               "%d %H%M{} %b %y",\n               "%d%H%M%S{}%b%y",\n               "%d %H%M%S{} %b %y"]\n    \n    zones = dict([\n        ('A', 'UTC+0100'),\n        ('B', 'UTC+0200'),\n        ('C', 'UTC+0300'),\n        ('D', 'UTC+0400'),\n        ('E', 'UTC+0500'),\n        ('F', 'UTC+0600'),\n        ('G', 'UTC+0700'),\n        ('H', 'UTC+0800'),\n        ('I', 'UTC+0900'),\n        ('J', 'Local Time'),\n        ('K', 'UTC+1000'),\n        ('L', 'UTC+1100'),\n        ('M', 'UTC+1200'),\n        ('N', 'UTC-0100'),\n        ('O', 'UTC-0200'),\n        ('P', 'UTC-0300'),\n        ('Q', 'UTC-0400'),\n        ('R', 'UTC-0500'),\n        ('S', 'UTC-0600'),\n        ('T', 'UTC-0700'),\n        ('U', 'UTC-0800'),\n        ('V', 'UTC-0900'),\n        ('W', 'UTC-1000'),\n        ('X', 'UTC-1100'),\n        ('Y', 'UTC-1200'),\n        ('Z', 'UTC+0000')\n    ])      \n    \n    timeCode = choice(codes)\n    timeZone = zones[timeCode]\n    timeFrmt = choice(formats)\n    \n    calcTime = dateTime\n    if not timeZone.endswith('Local Time'):\n\n        operator = timeZone[3]\n        hours = int(timeZone[4:6])\n        minutes = int(timeZone[6:8])\n\n        delta = datetime.timedelta(hours=hours, minutes=minutes)\n        calcTime = (dateTime + delta) if operator == '+' else (dateTime - delta)    \n        \n    return calcTime.strftime(timeFrmt.format(timeCode))"</Process><Process ToolSource="c:\program files (x86)\arcgis\desktop10.5\ArcToolbox\Toolboxes\Data Management Tools.tbx\CalculateField" Date="20171016" Time="145322">CalculateField Cities DTG2 createDateTimeGroupValues( arcpy.time.ParseDateTimeString( !MyDate! )) PYTHON_9.3 "import datetime\nfrom random import choice\ndef createDateTimeGroupValues(dateTime):\n    codes = [chr(n) for n in range(65, 65+26)]\n    formats = ["%d%H%M{} %b %Y", \n               "%d%H%M{}%b%Y",\n               "%d %H%M{} %b %Y",\n               "%d%H%M%S{}%b%Y",\n               "%d %H%M%S{} %b %Y",\n               "%d%H%M{}%b%y",\n               "%d %H%M{} %b %y",\n               "%d%H%M%S{}%b%y",\n               "%d %H%M%S{} %b %y"]\n    \n    zones = dict([\n        ('A', 'UTC+0100'),\n        ('B', 'UTC+0200'),\n        ('C', 'UTC+0300'),\n        ('D', 'UTC+0400'),\n        ('E', 'UTC+0500'),\n        ('F', 'UTC+0600'),\n        ('G', 'UTC+0700'),\n        ('H', 'UTC+0800'),\n        ('I', 'UTC+0900'),\n        ('J', 'Local Time'),\n        ('K', 'UTC+1000'),\n        ('L', 'UTC+1100'),\n        ('M', 'UTC+1200'),\n        ('N', 'UTC-0100'),\n        ('O', 'UTC-0200'),\n        ('P', 'UTC-0300'),\n        ('Q', 'UTC-0400'),\n        ('R', 'UTC-0500'),\n        ('S', 'UTC-0600'),\n        ('T', 'UTC-0700'),\n        ('U', 'UTC-0800'),\n        ('V', 'UTC-0900'),\n        ('W', 'UTC-1000'),\n        ('X', 'UTC-1100'),\n        ('Y', 'UTC-1200'),\n        ('Z', 'UTC+0000')\n    ])      \n    \n    timeCode = choice(codes)\n    timeZone = zones[timeCode]\n    timeFrmt = choice(formats)\n    \n    calcTime = dateTime\n    if not timeZone.endswith('Local Time'):\n\n        operator = timeZone[3]\n        hours = int(timeZone[4:6])\n        minutes = int(timeZone[6:8])\n\n        delta = datetime.timedelta(hours=hours, minutes=minutes)\n        calcTime = (dateTime + delta) if operator == '+' else (dateTime - delta)    \n        \n    return calcTime.strftime(timeFrmt.format(timeCode))"</Process><Process ToolSource="c:\program files (x86)\arcgis\desktop10.5\ArcToolbox\Toolboxes\Data Management Tools.tbx\CalculateField" Date="20171016" Time="145333">CalculateField Cities DTG3 createDateTimeGroupValues( arcpy.time.ParseDateTimeString( !MyDate! )) PYTHON_9.3 "import datetime\nfrom random import choice\ndef createDateTimeGroupValues(dateTime):\n    codes = [chr(n) for n in range(65, 65+26)]\n    formats = ["%d%H%M{} %b %Y", \n               "%d%H%M{}%b%Y",\n               "%d %H%M{} %b %Y",\n               "%d%H%M%S{}%b%Y",\n               "%d %H%M%S{} %b %Y",\n               "%d%H%M{}%b%y",\n               "%d %H%M{} %b %y",\n               "%d%H%M%S{}%b%y",\n               "%d %H%M%S{} %b %y"]\n    \n    zones = dict([\n        ('A', 'UTC+0100'),\n        ('B', 'UTC+0200'),\n        ('C', 'UTC+0300'),\n        ('D', 'UTC+0400'),\n        ('E', 'UTC+0500'),\n        ('F', 'UTC+0600'),\n        ('G', 'UTC+0700'),\n        ('H', 'UTC+0800'),\n        ('I', 'UTC+0900'),\n        ('J', 'Local Time'),\n        ('K', 'UTC+1000'),\n        ('L', 'UTC+1100'),\n        ('M', 'UTC+1200'),\n        ('N', 'UTC-0100'),\n        ('O', 'UTC-0200'),\n        ('P', 'UTC-0300'),\n        ('Q', 'UTC-0400'),\n        ('R', 'UTC-0500'),\n        ('S', 'UTC-0600'),\n        ('T', 'UTC-0700'),\n        ('U', 'UTC-0800'),\n        ('V', 'UTC-0900'),\n        ('W', 'UTC-1000'),\n        ('X', 'UTC-1100'),\n        ('Y', 'UTC-1200'),\n        ('Z', 'UTC+0000')\n    ])      \n    \n    timeCode = choice(codes)\n    timeZone = zones[timeCode]\n    timeFrmt = choice(formats)\n    \n    calcTime = dateTime\n    if not timeZone.endswith('Local Time'):\n\n        operator = timeZone[3]\n        hours = int(timeZone[4:6])\n        minutes = int(timeZone[6:8])\n\n        delta = datetime.timedelta(hours=hours, minutes=minutes)\n        calcTime = (dateTime + delta) if operator == '+' else (dateTime - delta)    \n        \n    return calcTime.strftime(timeFrmt.format(timeCode))"</Process></lineage></DataProperties></Esri></metadata>
